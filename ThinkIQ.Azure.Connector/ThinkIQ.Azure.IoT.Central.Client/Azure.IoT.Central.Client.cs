//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------


namespace ThinkIQ.Azure.IoT.Central.Client
{
    using Newtonsoft.Json;
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AzureIoTCentral
    {
        private string _baseUrl = "https://workflow.azureiotcentral.com/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AzureIoTCentral(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings
        {
            get { return _settings.Value; }
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);


        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request,
            string url);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request,
            System.Text.StringBuilder urlBuilder);

        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Get the list of applications accessible to the signed-in user</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApplicationCollection> ListAsync()
        {
            return ListAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the list of applications accessible to the signed-in user</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApplicationCollection> ListAsync(
            System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/preview/applications");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ApplicationCollection>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(
            System.Net.Http.HttpResponseMessage response,
            System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>>
                headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                // Get text here
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody =
                        Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int) response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int) response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType())
                        .GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field,
                                typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value,
                        System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool) value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>List device templates</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceTemplateCollection> ListAsync(string application)
        {
            return ListAsync(application, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List device templates</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceTemplateCollection> ListAsync(string application,
            System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/preview/deviceTemplates?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceTemplateCollection>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>List device templates</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceTemplateCollectionV1> ListDeviceTemplatesV1Async()
        {
            return ListDeviceTemplatesV1Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List device templates</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceTemplateCollectionV1> ListDeviceTemplatesV1Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/deviceTemplates?api-version=1.0");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceTemplateCollectionV1>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        public System.Threading.Tasks.Task<string> ListDeviceTemplates()
        {
            return ListDeviceTemplates(System.Threading.CancellationToken.None);
        }

        public async System.Threading.Tasks.Task<string> ListDeviceTemplates(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/deviceTemplates?api-version=1.0");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            if (response_ == null || response_.Content == null)
                            {
                                return null;
                            }

                            var responseText = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            return responseText;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }


        /// <summary>List devices</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceCollectionV1> ListDevicesV1Async()
        {
            return ListDevicesV1Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List devices</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceCollectionV1> ListDevicesV1Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/devices?api-version=1.0");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceCollectionV1>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List roles</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RoleCollectionV1> ListRolesV1Async(string application)
        {
            return ListRolesV1Async(application, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List roles</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RoleCollectionV1> ListRolesV1Async(string application,
            System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/roles?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<RoleCollectionV1>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List users</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserCollectionV1> ListUsersV1Async(string application)
        {
            return ListUsersV1Async(application, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List users</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserCollectionV1> ListUsersV1Async(string application,
            System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/users?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<UserCollectionV1>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }


    public partial class AzureIoTCentral
    {
        /// <summary>Get a device template by ID</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="template_id">Unique ID of the template.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceTemplateV1> GetDeviceTemplateV1Async(string application,
            string template_id)
        {
            return GetDeviceTemplateV1Async(application, template_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a device template by ID</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="template_id">Unique ID of the template.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceTemplateV1> GetDeviceTemplateV1Async(string application,
            string template_id, System.Threading.CancellationToken cancellationToken)
        {
            if (template_id == null)
                throw new System.ArgumentNullException("template_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/deviceTemplates/{template_id}?");
            urlBuilder_.Replace("{template_id}",
                System.Uri.EscapeDataString(ConvertToString(template_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceTemplateV1>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a device by ID</summary>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceV1> GetDeviceV1Async(string device_id)
        {
            return GetDeviceV1Async(device_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a device by ID</summary>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceV1> GetDeviceV1Async(string device_id, System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/devices/{device_id}?api-version=1.0");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceV1>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get role</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="role_id">Unique ID for the role.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RoleV1> GetRoleV1Async(string application, string role_id)
        {
            return GetRoleV1Async(application, role_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get role</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="role_id">Unique ID for the role.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RoleV1> GetRoleV1Async(string application, string role_id,
            System.Threading.CancellationToken cancellationToken)
        {
            if (role_id == null)
                throw new System.ArgumentNullException("role_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/roles/{role_id}?");
            urlBuilder_.Replace("{role_id}",
                System.Uri.EscapeDataString(ConvertToString(role_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<RoleV1>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get user</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="user_id">Unique ID of the user.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserStaticV1> GetUserV1Async(string application, string user_id)
        {
            return GetUserV1Async(application, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get user</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="user_id">Unique ID of the user.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserStaticV1> GetUserV1Async(string application, string user_id,
            System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/users/{user_id}?");
            urlBuilder_.Replace("{user_id}",
                System.Uri.EscapeDataString(ConvertToString(user_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<UserStaticV1>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Delete a device template</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="template_id">Unique ID of the template.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteDeviceTemplateV1Async(string application, string template_id)
        {
            return DeleteDeviceTemplateV1Async(application, template_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a device template</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="template_id">Unique ID of the template.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteDeviceTemplateV1Async(string application, string template_id,
            System.Threading.CancellationToken cancellationToken)
        {
            if (template_id == null)
                throw new System.ArgumentNullException("template_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/deviceTemplates/{template_id}?");
            urlBuilder_.Replace("{template_id}",
                System.Uri.EscapeDataString(ConvertToString(template_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a device</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteDeviceV1Async(string application, string device_id)
        {
            return DeleteDeviceV1Async(application, device_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a device</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteDeviceV1Async(string application, string device_id,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/devices/{device_id}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete user</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="user_id">Unique ID of the user.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteUserV1Async(string application, string user_id)
        {
            return DeleteUserV1Async(application, user_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete user</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="user_id">Unique ID of the user.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteUserV1Async(string application, string user_id,
            System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/users/{user_id}?");
            urlBuilder_.Replace("{user_id}",
                System.Uri.EscapeDataString(ConvertToString(user_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Get device cloud properties (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceCloudProperties> GetCloudPropertiesAsync(string application,
            string device_id, string instanceOf)
        {
            return GetCloudPropertiesAsync(application, device_id, instanceOf, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get device cloud properties (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceCloudProperties> GetCloudPropertiesAsync(string application,
            string device_id, string instanceOf, System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/devices/{device_id}/cloudProperties?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (instanceOf != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceOf") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(instanceOf,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceCloudProperties>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Update device cloud properties (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <param name="body">Device properties.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceCloudProperties> UpdateCloudPropertiesAsync(string application,
            string device_id, string instanceOf, DeviceCloudProperties body)
        {
            return UpdateCloudPropertiesAsync(application, device_id, instanceOf, body,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update device cloud properties (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <param name="body">Device properties.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceCloudProperties> UpdateCloudPropertiesAsync(string application,
            string device_id, string instanceOf, DeviceCloudProperties body,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/devices/{device_id}/cloudProperties?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (instanceOf != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceOf") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(instanceOf,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceCloudProperties>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Execute a device command (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <param name="body">Device command body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceCommand> ExecuteComponentCommandAsync(string application,
            string device_id, string component_name, string command_name, string instanceOf, DeviceCommand body)
        {
            return ExecuteComponentCommandAsync(application, device_id, component_name, command_name, instanceOf, body,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Execute a device command (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <param name="body">Device command body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceCommand> ExecuteComponentCommandAsync(string application,
            string device_id, string component_name, string command_name, string instanceOf, DeviceCommand body,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (component_name == null)
                throw new System.ArgumentNullException("component_name");

            if (command_name == null)
                throw new System.ArgumentNullException("command_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append(
                "/api/preview/devices/{device_id}/components/{component_name}/commands/{command_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_name}",
                System.Uri.EscapeDataString(ConvertToString(component_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{command_name}",
                System.Uri.EscapeDataString(ConvertToString(command_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (instanceOf != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceOf") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(instanceOf,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceCommand>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a device by ID (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Device> GetAsync(string application, string device_id)
        {
            return GetAsync(application, device_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a device by ID (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Device> GetAsync(string application, string device_id,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/preview/devices/{device_id}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Device>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Create or update a device (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="body">Device body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Device> SetAsync(string application, string device_id, Device body)
        {
            return SetAsync(application, device_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create or update a device (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="body">Device body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Device> SetAsync(string application, string device_id, Device body,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/preview/devices/{device_id}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Device>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a device (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveAsync(string application, string device_id)
        {
            return RemoveAsync(application, device_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a device (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveAsync(string application, string device_id,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/preview/devices/{device_id}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get device properties (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceProperties> GetPropertiesAsync(string application, string device_id,
            string instanceOf)
        {
            return GetPropertiesAsync(application, device_id, instanceOf, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get device properties (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceProperties> GetPropertiesAsync(string application,
            string device_id, string instanceOf, System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/devices/{device_id}/properties?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (instanceOf != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceOf") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(instanceOf,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceProperties>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Update device properties (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <param name="body">Device properties.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceProperties> UpdatePropertiesAsync(string application, string device_id,
            string instanceOf, DeviceProperties body)
        {
            return UpdatePropertiesAsync(application, device_id, instanceOf, body,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update device properties (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <param name="body">Device properties.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceProperties> UpdatePropertiesAsync(string application,
            string device_id, string instanceOf, DeviceProperties body,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/devices/{device_id}/properties?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (instanceOf != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceOf") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(instanceOf,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceProperties>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get device telemetry value (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="telemetry_name">Name of this device telemetry.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceTelemetry> GetComponentTelemetryValueAsync(string application,
            string device_id, string component_name, string telemetry_name, string instanceOf)
        {
            return GetComponentTelemetryValueAsync(application, device_id, component_name, telemetry_name, instanceOf,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get device telemetry value (deprecated)</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="telemetry_name">Name of this device telemetry.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceTelemetry> GetComponentTelemetryValueAsync(string application,
            string device_id, string component_name, string telemetry_name, string instanceOf,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (component_name == null)
                throw new System.ArgumentNullException("component_name");

            if (telemetry_name == null)
                throw new System.ArgumentNullException("telemetry_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append(
                "/api/preview/devices/{device_id}/components/{component_name}/telemetry/{telemetry_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_name}",
                System.Uri.EscapeDataString(ConvertToString(component_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{telemetry_name}",
                System.Uri.EscapeDataString(ConvertToString(telemetry_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (instanceOf != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceOf") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(instanceOf,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceTelemetry>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Get device command response</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceCommandV1> GetDeviceCommandV1Async(string application,
            string device_id, string command_name, string template)
        {
            return GetDeviceCommandV1Async(application, device_id, command_name, template,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get device command response</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceCommandV1> GetDeviceCommandV1Async(string application,
            string device_id, string command_name, string template,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (command_name == null)
                throw new System.ArgumentNullException("command_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/devices/{device_id}/commands/{command_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{command_name}",
                System.Uri.EscapeDataString(ConvertToString(command_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(template,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceCommandV1>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Run a device command</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <param name="body">Device command body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceCommandV1> RunDeviceCommanV1Async(string application, string device_id,
            string command_name, string template, DeviceCommandV1 body)
        {
            return RunDeviceCommanV1Async(application, device_id, command_name, template, body,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Run a device command</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <param name="body">Device command body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceCommandV1> RunDeviceCommanV1Async(string application,
            string device_id, string command_name, string template, DeviceCommandV1 body,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (command_name == null)
                throw new System.ArgumentNullException("command_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/devices/{device_id}/commands/{command_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{command_name}",
                System.Uri.EscapeDataString(ConvertToString(command_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(template,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceCommandV1>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

    }

    public partial class AzureIoTCentral
    {
        /// <summary>Get component command response</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceComponentCommandV1> GetDeviceComponentCommandV1Async(
            string application, string device_id, string component_name, string command_name, string template)
        {
            return GetDeviceComponentCommandV1Async(application, device_id, component_name, command_name, template,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get component command response</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceComponentCommandV1> GetDeviceComponentCommandV1Async(
            string application, string device_id, string component_name, string command_name, string template,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (component_name == null)
                throw new System.ArgumentNullException("component_name");

            if (command_name == null)
                throw new System.ArgumentNullException("command_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/devices/{device_id}/components/{component_name}/commands/{command_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_name}",
                System.Uri.EscapeDataString(ConvertToString(component_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{command_name}",
                System.Uri.EscapeDataString(ConvertToString(command_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(template,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceComponentCommandV1>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Run a component command</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <param name="body">Device command body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceComponentCommandV1> RunDeviceComponentCommandV1Async(
            string application, string device_id, string component_name, string command_name, string template,
            DeviceComponentCommandV1 body)
        {
            return RunDeviceComponentCommandV1Async(application, device_id, component_name, command_name, template,
                body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Run a component command</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <param name="body">Device command body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceComponentCommandV1> RunDeviceComponentCommandV1Async(
            string application, string device_id, string component_name, string command_name, string template,
            DeviceComponentCommandV1 body, System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (component_name == null)
                throw new System.ArgumentNullException("component_name");

            if (command_name == null)
                throw new System.ArgumentNullException("command_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/devices/{device_id}/components/{component_name}/commands/{command_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_name}",
                System.Uri.EscapeDataString(ConvertToString(component_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{command_name}",
                System.Uri.EscapeDataString(ConvertToString(command_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(template,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceComponentCommandV1>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

    }

    public partial class AzureIoTCentral
    {
        /// <summary>Get module command response</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceModuleCommandV1> GetDeviceModuleCommandV1Async(string application,
            string device_id, string module, string command_name, string template)
        {
            return GetDeviceModuleCommandV1Async(application, device_id, module, command_name, template,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get module command response</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceModuleCommandV1> GetDeviceModuleCommandV1Async(
            string application, string device_id, string module, string command_name, string template,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (module == null)
                throw new System.ArgumentNullException("module");

            if (command_name == null)
                throw new System.ArgumentNullException("command_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/devices/{device_id}/modules/{module}/commands/{command_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{module}",
                System.Uri.EscapeDataString(ConvertToString(module,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{command_name}",
                System.Uri.EscapeDataString(ConvertToString(command_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(template,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceModuleCommandV1>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Run a module command</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <param name="body">Device command body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceModuleCommandV1> RunDeviceModuleCommandV1Async(string application,
            string device_id,
            string module, string command_name, string template, DeviceModuleCommandV1 body)
        {
            return RunDeviceModuleCommandV1Async(application, device_id, module, command_name, template, body,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Run a module command</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <param name="body">Device command body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceModuleCommandV1> RunDeviceModuleCommandV1Async(
            string application, string device_id,
            string module, string command_name, string template, DeviceModuleCommandV1 body,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (module == null)
                throw new System.ArgumentNullException("module");

            if (command_name == null)
                throw new System.ArgumentNullException("command_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/devices/{device_id}/modules/{module}/commands/{command_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{module}",
                System.Uri.EscapeDataString(ConvertToString(module,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{command_name}",
                System.Uri.EscapeDataString(
                    ConvertToString(command_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceModuleCommandV1>(response_, headers_,
                                        cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Get module component command response</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceModuleComponentCommandV1> GetDeviceModuleComponentCommandV1Async(
            string application, string device_id,
            string module, string component_name, string command_name, string template)
        {
            return GetDeviceModuleComponentCommandV1Async(application, device_id, module, component_name, command_name,
                template,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get module component command response</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceModuleComponentCommandV1> GetDeviceModuleComponentCommandV1Async(
            string application,
            string device_id, string module, string component_name, string command_name, string template,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (module == null)
                throw new System.ArgumentNullException("module");

            if (component_name == null)
                throw new System.ArgumentNullException("component_name");

            if (command_name == null)
                throw new System.ArgumentNullException("command_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append(
                "/api/v1/devices/{device_id}/modules/{module}/components/{component_name}/commands/{command_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{module}",
                System.Uri.EscapeDataString(ConvertToString(module,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_name}",
                System.Uri.EscapeDataString(ConvertToString(component_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{command_name}",
                System.Uri.EscapeDataString(
                    ConvertToString(command_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceModuleComponentCommandV1>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Run a module component command</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <param name="body">Device command body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceModuleComponentCommandV1> V1Async(string application, string device_id,
            string module, string component_name, string command_name, string template,
            DeviceModuleComponentCommandV1 body)
        {
            return V1Async(application, device_id, module, component_name, command_name, template, body,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Run a module component command</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="command_name">Name of this device command.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <param name="body">Device command body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceModuleComponentCommandV1> V1Async(string application,
            string device_id, string module, string component_name, string command_name, string template,
            DeviceModuleComponentCommandV1 body, System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (module == null)
                throw new System.ArgumentNullException("module");

            if (component_name == null)
                throw new System.ArgumentNullException("component_name");

            if (command_name == null)
                throw new System.ArgumentNullException("command_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append(
                "/api/v1/devices/{device_id}/modules/{module}/components/{component_name}/commands/{command_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{module}",
                System.Uri.EscapeDataString(ConvertToString(module,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_name}",
                System.Uri.EscapeDataString(ConvertToString(component_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{command_name}",
                System.Uri.EscapeDataString(
                    ConvertToString(command_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceModuleComponentCommandV1>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Create or update a device</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="body">Device body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceV1> V1Async(string application, string device_id, DeviceV1 body)
        {
            return V1Async(application, device_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create or update a device</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="body">Device body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceV1> V1Async(string application, string device_id, DeviceV1 body,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/devices/{device_id}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceV1>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

    }

    public partial class AzureIoTCentral
    {
        /// <summary>Get device properties</summary>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DevicePropertiesV1> GetDevicePropertiesV1Async(string device_id, string template)
        {
            return GetDevicePropertiesV1Async(device_id, template, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get device properties</summary>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DevicePropertiesV1> GetDevicePropertiesV1Async(string device_id, string template, System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/devices/{device_id}/properties?api-version=1.0");
            
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DevicePropertiesV1>(response_, headers_,
                                        cancellationToken)
                                    .ConfigureAwait(false);


                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Update device properties</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <param name="body">Device properties.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DevicePropertiesV1> UpdateDevicePropertiesV1Async(string application,
            string device_id,
            string template, DevicePropertiesV1 body)
        {
            return UpdateDevicePropertiesV1Async(application, device_id, template, body,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update device properties</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <param name="body">Device properties.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DevicePropertiesV1> UpdateDevicePropertiesV1Async(string application,
            string device_id,
            string template, DevicePropertiesV1 body, System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/devices/{device_id}/properties?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DevicePropertiesV1>(response_, headers_,
                                        cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Get module properties</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ModulePropertiesV1> V1Async(string application, string device_id,
            string module,
            string template)
        {
            return V1Async(application, device_id, module, template, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get module properties</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ModulePropertiesV1> V1Async(string application, string device_id,
            string module, string template, System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (module == null)
                throw new System.ArgumentNullException("module");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/devices/{device_id}/modules/{module}/properties?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{module}",
                System.Uri.EscapeDataString(ConvertToString(module,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ModulePropertiesV1>(response_, headers_,
                                        cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Update module properties</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <param name="body">Device properties.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ModulePropertiesV1> V1Async(string application, string device_id,
            string module,
            string template, ModulePropertiesV1 body)
        {
            return V1Async(application, device_id, module, template, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update module properties</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <param name="body">Device properties.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ModulePropertiesV1> V1Async(string application, string device_id,
            string module, string template, ModulePropertiesV1 body,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (module == null)
                throw new System.ArgumentNullException("module");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/devices/{device_id}/modules/{module}/properties?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{module}",
                System.Uri.EscapeDataString(ConvertToString(module,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ModulePropertiesV1>(response_, headers_,
                                        cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Get device telemetry value</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="telemetry_name">Name of this device telemetry.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceTelemetryV1> GetDeviceTelemetryV1Async(string application,
            string device_id,
            string telemetry_name, string template)
        {
            return GetDeviceTelemetryV1Async(application, device_id, telemetry_name, template,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get device telemetry value</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="telemetry_name">Name of this device telemetry.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceTelemetryV1> GetDeviceTelemetryV1Async(string application,
            string device_id,
            string telemetry_name, string template, System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (telemetry_name == null)
                throw new System.ArgumentNullException("telemetry_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/devices/{device_id}/telemetry/{telemetry_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{telemetry_name}",
                System.Uri.EscapeDataString(ConvertToString(telemetry_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceTelemetryV1>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Get component telemetry value</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="telemetry_name">Name of this device telemetry.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceComponentTelemetryV1> GetDeviceComponentTelemetryV1Async(
            string application, string device_id,
            string component_name, string telemetry_name, string template)
        {
            return GetDeviceComponentTelemetryV1Async(application, device_id, component_name, telemetry_name, template,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get component telemetry value</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="telemetry_name">Name of this device telemetry.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceComponentTelemetryV1> GetDeviceComponentTelemetryV1Async(
            string application, string device_id,
            string component_name, string telemetry_name, string template,
            System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (component_name == null)
                throw new System.ArgumentNullException("component_name");

            if (telemetry_name == null)
                throw new System.ArgumentNullException("telemetry_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/devices/{device_id}/components/{component_name}/telemetry/{telemetry_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_name}",
                System.Uri.EscapeDataString(ConvertToString(component_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{telemetry_name}",
                System.Uri.EscapeDataString(ConvertToString(telemetry_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceComponentTelemetryV1>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Get module telemetry value</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="telemetry_name">Name of this device telemetry.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceModuleTelemetryV1> GetDeviceModuleTelemetryV1Async(string application,
            string device_id,
            string module, string telemetry_name, string template)
        {
            return GetDeviceModuleTelemetryV1Async(application, device_id, module, telemetry_name, template,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get module telemetry value</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="telemetry_name">Name of this device telemetry.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceModuleTelemetryV1> GetDeviceModuleTelemetryV1Async(
            string application, string device_id,
            string module, string telemetry_name, string template, System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (module == null)
                throw new System.ArgumentNullException("module");

            if (telemetry_name == null)
                throw new System.ArgumentNullException("telemetry_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/devices/{device_id}/modules/{module}/telemetry/{telemetry_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{module}",
                System.Uri.EscapeDataString(ConvertToString(module,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{telemetry_name}",
                System.Uri.EscapeDataString(ConvertToString(telemetry_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceModuleTelemetryV1>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Get module component telemetry value</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="telemetry_name">Name of this device telemetry.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceModuleComponentTelemetryV1> GetDeviceModuleComponentTelemetryV1Async(
            string application, string device_id,
            string module, string component_name, string telemetry_name, string template)
        {
            return GetDeviceModuleComponentTelemetryV1Async(application, device_id, module, component_name,
                telemetry_name, template,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get module component telemetry value</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="device_id">Unique ID of the device.</param>
        /// <param name="module">Name of the device module.</param>
        /// <param name="component_name">Name of the device component.</param>
        /// <param name="telemetry_name">Name of this device telemetry.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceModuleComponentTelemetryV1>
            GetDeviceModuleComponentTelemetryV1Async(string application,
                string device_id, string module, string component_name, string telemetry_name, string template,
                System.Threading.CancellationToken cancellationToken)
        {
            if (device_id == null)
                throw new System.ArgumentNullException("device_id");

            if (module == null)
                throw new System.ArgumentNullException("module");

            if (component_name == null)
                throw new System.ArgumentNullException("component_name");

            if (telemetry_name == null)
                throw new System.ArgumentNullException("telemetry_name");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append(
                "/api/v1/devices/{device_id}/modules/{module}/components/{component_name}/telemetry/{telemetry_name}?");
            urlBuilder_.Replace("{device_id}",
                System.Uri.EscapeDataString(ConvertToString(device_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{module}",
                System.Uri.EscapeDataString(ConvertToString(module,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_name}",
                System.Uri.EscapeDataString(ConvertToString(component_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{telemetry_name}",
                System.Uri.EscapeDataString(ConvertToString(telemetry_name,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<DeviceModuleComponentTelemetryV1>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Get the list of rules in an application</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RuleCollection> ListRulesAsync(string application)
        {
            return ListRulesAsync(application, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the list of rules in an application</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RuleCollection> ListRulesAsync(string application,
            System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/preview/rules?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<RuleCollection>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }


    public partial class AzureIoTCentral
    {
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> DevicePropertiesAsync(string application, string instanceOf)
        {
            return DevicePropertiesAsync(application, instanceOf, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> DevicePropertiesAsync(string application, string instanceOf,
            System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/_internal/workflow/schema/DeviceProperties?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (instanceOf != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceOf") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(instanceOf,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="application">Unique ID of the application.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> DeviceCloudPropertiesAsync(string application, string instanceOf)
        {
            return DeviceCloudPropertiesAsync(application, instanceOf, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> DeviceCloudPropertiesAsync(string application,
            string instanceOf,
            System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/_internal/workflow/schema/DeviceCloudProperties?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (instanceOf != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceOf") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(instanceOf,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="application">Unique ID of the application.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> DeviceTelemetryAsync(string application, string instanceOf,
            string component, string capability)
        {
            return DeviceTelemetryAsync(application, instanceOf, component, capability,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> DeviceTelemetryAsync(string application, string instanceOf,
            string component, string capability, System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/_internal/workflow/schema/DeviceTelemetry?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (instanceOf != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceOf") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(instanceOf,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (component != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("component") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(component,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (capability != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("capability") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(capability,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="application">Unique ID of the application.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> DeviceCommandAsync(string application, string instanceOf,
            string component, string capability)
        {
            return DeviceCommandAsync(application, instanceOf, component, capability,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="instanceOf">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> DeviceCommandAsync(string application, string instanceOf,
            string component, string capability, System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/_internal/workflow/schema/DeviceCommand?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (instanceOf != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceOf") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(instanceOf,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (component != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("component") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(component,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (capability != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("capability") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(capability,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="application">Unique ID of the application.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task WebhookActionBodyAsync(string application, string rule)
        {
            return WebhookActionBodyAsync(application, rule, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task WebhookActionBodyAsync(string application, string rule,
            System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/_internal/workflow/schema/WebhookActionBody?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (rule != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rule") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(rule,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200 || status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> DefinitionAsync(string application, string type)
        {
            return DefinitionAsync(application, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> DefinitionAsync(string application, string type,
            System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/_internal/workflow/schema/{type}?");
            urlBuilder_.Replace("{type}",
                System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetDevicePropertiesInModuleV1Async(string application,
            string template, string module)
        {
            return GetDevicePropertiesInModuleV1Async(application, template, module,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> GetDevicePropertiesInModuleV1Async(string application,
            string template, string module,
            System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/_internal/workflow/schema/DeviceProperties?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (module != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("module") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(module,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetDeviceTelemetryV1Async(string application, string template,
            string module,
            string component, string capability)
        {
            return GetDeviceTelemetryV1Async(application, template, module, component, capability,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> GetDeviceTelemetryV1Async(string application, string template,
            string module,
            string component, string capability, System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/_internal/workflow/schema/DeviceTelemetry?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (module != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("module") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(module,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (component != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("component") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(component,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (capability != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("capability") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(capability,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

    }

    public partial class AzureIoTCentral
    {
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> V1Async(string application, string template, string module,
            string component, string capability)
        {
            return V1Async(application, template, module, component, capability,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="template">The device template definition for the device.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> V1Async(string application, string template, string module,
            string component, string capability, System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/_internal/workflow/schema/DeviceCommand?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (template != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=").Append(
                    System.Uri.EscapeDataString(
                        ConvertToString(template, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (module != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("module") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(module,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (component != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("component") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(component,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (capability != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("capability") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(capability,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> V1Async(string application, string user_type, bool? patch)
        {
            return V1Async(application, user_type, patch, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> V1Async(string application, string user_type, bool? patch,
            System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/_internal/workflow/schema/User?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (user_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("user_type") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(user_type,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (patch != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("patch") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(patch,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

    }

    public partial class AzureIoTCentral
    {
        /// <summary>Create user</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="user_id">Unique ID of the user.</param>
        /// <param name="user_type">Type of the user.</param>
        /// <param name="body">User create body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserV1> V1Async(string application, string user_id, User_type? user_type,
            UserV1 body)
        {
            return V1Async(application, user_id, user_type, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create user</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="user_id">Unique ID of the user.</param>
        /// <param name="user_type">Type of the user.</param>
        /// <param name="body">User create body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserV1> V1Async(string application, string user_id,
            User_type? user_type,
            UserV1 body, System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/users/{user_id}?");
            urlBuilder_.Replace("{user_id}",
                System.Uri.EscapeDataString(ConvertToString(user_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (user_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("user_type") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(user_type,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<UserV1>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>Update user</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="user_id">Unique ID of the user.</param>
        /// <param name="user_type">Type of the user.</param>
        /// <param name="body">User update body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserPatchV1> UpdateUserV1Async(string application, string user_id,
            User_type? user_type,
            UserPatchV1 body)
        {
            return UpdateUserV1Async(application, user_id, user_type, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update user</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <param name="user_id">Unique ID of the user.</param>
        /// <param name="user_type">Type of the user.</param>
        /// <param name="body">User update body.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UserPatchV1> UpdateUserV1Async(string application, string user_id,
            User_type? user_type, UserPatchV1 body, System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/users/{user_id}?");
            urlBuilder_.Replace("{user_id}",
                System.Uri.EscapeDataString(ConvertToString(user_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (user_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("user_type") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(user_type,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<UserPatchV1>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <summary>When a rule is fired</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WorkflowTrigger> CreateTriggerAsync(string application, WorkflowTrigger body)
        {
            return CreateTriggerAsync(application, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>When a rule is fired</summary>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WorkflowTrigger> CreateTriggerAsync(string application,
            WorkflowTrigger body, System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/_internal/workflow/triggers?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ =
                        new System.Net.Http.StringContent(
                            Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType =
                        System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<WorkflowTrigger>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WorkflowTrigger> GetTriggerAsync(string application, string trigger_id)
        {
            return GetTriggerAsync(application, trigger_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WorkflowTrigger> GetTriggerAsync(string application, string trigger_id,
            System.Threading.CancellationToken cancellationToken)
        {
            if (trigger_id == null)
                throw new System.ArgumentNullException("trigger_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/_internal/workflow/triggers/{trigger_id}?");
            urlBuilder_.Replace("{trigger_id}",
                System.Uri.EscapeDataString(ConvertToString(trigger_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<WorkflowTrigger>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveTriggerAsync(string application, string trigger_id)
        {
            return RemoveTriggerAsync(application, trigger_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveTriggerAsync(string application, string trigger_id,
            System.Threading.CancellationToken cancellationToken)
        {
            if (trigger_id == null)
                throw new System.ArgumentNullException("trigger_id");

            if (application == null)
                throw new System.ArgumentNullException("application");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/_internal/workflow/triggers/{trigger_id}?");
            urlBuilder_.Replace("{trigger_id}",
                System.Uri.EscapeDataString(ConvertToString(trigger_id,
                    System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> GetComponentsAsync(
            string application, string template, string module)
        {
            return GetComponentsAsync(application, template, module, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> GetComponentsAsync(
            string application, string template, string module, System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            if (template == null)
                throw new System.ArgumentNullException("template");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/_internal/workflow/components?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(template,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (module != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("module") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(module,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(
                                    response_,
                                    headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> GetCapabilitiesAsync(
            string application, string template, string component, string module, string type)
        {
            return GetCapabilitiesAsync(application, template, component, module, type,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>>
            GetCapabilitiesAsync(
                string application, string template, string component, string module, string type,
                System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            if (template == null)
                throw new System.ArgumentNullException("template");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/preview/_internal/workflow/capabilities?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(template,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (component != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("component") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(component,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (module != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("module") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(module,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(type,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(
                                    response_,
                                    headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> V1Async(
            string application,
            string template)
        {
            return V1Async(application, template, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> V1Async(
            string application, string template, System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            if (template == null)
                throw new System.ArgumentNullException("template");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/_internal/workflow/modules?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(template,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(
                                    response_,
                                    headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }

    public partial class AzureIoTCentral
    {
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> V1Async(
            string application,
            string template, string module)
        {
            return V1Async(application, template, module, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> V1Async(
            string application, string template, string module, System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            if (template == null)
                throw new System.ArgumentNullException("template");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/_internal/workflow/components?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(template,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (module != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("module") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(module,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(
                                    response_,
                                    headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }


    public partial class AzureIoTCentral
    {
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> GetCapabilitiesV1Async(
            string application,
            string template, string component, string module, string type)
        {
            return GetCapabilitiesV1Async(application, template, component, module, type,
                System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="application">Unique ID of the application.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>>
            GetCapabilitiesV1Async(
                string application, string template, string component, string module, string type,
                System.Threading.CancellationToken cancellationToken)
        {
            if (application == null)
                throw new System.ArgumentNullException("application");

            if (template == null)
                throw new System.ArgumentNullException("template");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/api/v1/_internal/workflow/capabilities?");
            urlBuilder_.Append(System.Uri.EscapeDataString("application") + "=").Append(
                System.Uri.EscapeDataString(ConvertToString(application,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("template") + "=")
                .Append(System.Uri.EscapeDataString(ConvertToString(template,
                    System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (component != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("component") + "=").Append(
                    System.Uri.EscapeDataString(ConvertToString(component,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (module != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("module") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(module,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=")
                    .Append(System.Uri.EscapeDataString(ConvertToString(type,
                        System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_
                        .SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                            cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ =
                            System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int) response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(
                                    response_,
                                    headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    }


    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Action
    {
        /// <summary>Unique ID of the action.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Display name of the action.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>Unique IDs of the rules that are tied to the action.</summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<string> Rules { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();


    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EmailAction
    {
        /// <summary>Unique ID of the email action.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Display name of the email action.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>Unique IDs of the rules that are tied to the email action.</summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<string> Rules { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();


    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WebhookAction
    {
        /// <summary>Unique ID of the webhook action.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Display name of the webhook action.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>Unique IDs of the rules that are tied to the webhook action.</summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<string> Rules { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        /// <summary>Callback URL of the webhook.</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Url { get; set; }


    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PowerAutomateAction
    {
        /// <summary>Unique ID of the Power Automate action.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Display name of the Power Automate action.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>Unique IDs of the rules that are tied to the Power Automate action.</summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<string> Rules { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();


    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogicAppsAction
    {
        /// <summary>Unique ID of the Logic Apps action.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Display name of the Logic Apps action.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>Unique IDs of the rules that are tied to the Logic Apps action.</summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<string> Rules { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();


    }

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ActionGroupsAction
    {
        /// <summary>Unique ID of the Action Groups action.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Display name of the Action Groups action.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>Unique IDs of the rules that are tied to the Action Groups action.</summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<string> Rules { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Application
    {
        /// <summary>Unique ID of the application.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Display name of the application.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>The URL subdomain of the application.</summary>
        [Newtonsoft.Json.JsonProperty("subdomain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subdomain { get; set; }

        /// <summary>The URL host of the application.</summary>
        [Newtonsoft.Json.JsonProperty("host", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Host { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApplicationCollection
    {
        /// <summary>The collection of applications.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Application> Value { get; set; } =
            new System.Collections.ObjectModel.Collection<Application>();

        /// <summary>URL to get the next page of applications.</summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Device
    {
        /// <summary>Unique ID of the device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>ETag used to prevent conflict in device updates.</summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>Display name of the device.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>The device template definition for the device.</summary>
        [Newtonsoft.Json.JsonProperty("instanceOf", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceOf { get; set; }

        /// <summary>Whether the device is simulated.</summary>
        [Newtonsoft.Json.JsonProperty("simulated", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Simulated { get; set; }

        /// <summary>Whether the device has been approved to connect to IoT Central.</summary>
        [Newtonsoft.Json.JsonProperty("approved", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Approved { get; set; }

        /// <summary>Whether resources have been allocated for the device.</summary>
        [Newtonsoft.Json.JsonProperty("provisioned", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Provisioned { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceV1
    {
        /// <summary>Unique ID of the device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>ETag used to prevent conflict in device updates.</summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>Display name of the device.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>The device template definition for the device.</summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

        /// <summary>Whether the device is simulated.</summary>
        [Newtonsoft.Json.JsonProperty("simulated", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Simulated { get; set; }

        /// <summary>Whether the device connection to IoT Central has been enabled.</summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>Whether resources have been allocated for the device.</summary>
        [Newtonsoft.Json.JsonProperty("provisioned", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Provisioned { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceCollectionV1
    {
        /// <summary>The collection of devices.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DeviceV1> Value { get; set; } =
            new System.Collections.ObjectModel.Collection<DeviceV1>();

        /// <summary>URL to get the next page of devices.</summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }


    }
    /*
    /// <summary>Cloud property values associated with the device.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceCloudProperties
    {

    }
    */

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceCommand
    {
        /// <summary>The request ID of the device command execution.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>The payload for the device command.</summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Request { get; set; }

        /// <summary>The payload of the device command response.</summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Response { get; set; }

        /// <summary>Connection timeout in seconds to wait for a disconnected device to come online. Defaults to 0 seconds.</summary>
        [Newtonsoft.Json.JsonProperty("connectionTimeout", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 30)]
        public int? ConnectionTimeout { get; set; }

        /// <summary>Response timeout in seconds to wait for a command completion on a device. Defaults to 30 seconds.</summary>
        [Newtonsoft.Json.JsonProperty("responseTimeout", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(5, 30)]
        public int? ResponseTimeout { get; set; }

        /// <summary>The status code of the device command response.</summary>
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResponseCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceCommandV1
    {
        /// <summary>The request ID of the device command execution.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>The payload for the device command.</summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Request { get; set; }

        /// <summary>The payload of the device command response.</summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Response { get; set; }

        /// <summary>Connection timeout in seconds to wait for a disconnected device to come online. Defaults to 0 seconds.</summary>
        [Newtonsoft.Json.JsonProperty("connectionTimeout", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 30)]
        public int? ConnectionTimeout { get; set; }

        /// <summary>Response timeout in seconds to wait for a command completion on a device. Defaults to 30 seconds.</summary>
        [Newtonsoft.Json.JsonProperty("responseTimeout", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(5, 30)]
        public int? ResponseTimeout { get; set; }

        /// <summary>The status code of the device command response.</summary>
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResponseCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceComponentCommandV1
    {
        /// <summary>The request ID of the device command execution.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>The payload for the device command.</summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Request { get; set; }

        /// <summary>The payload of the device command response.</summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Response { get; set; }

        /// <summary>Connection timeout in seconds to wait for a disconnected device to come online. Defaults to 0 seconds.</summary>
        [Newtonsoft.Json.JsonProperty("connectionTimeout", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 30)]
        public int? ConnectionTimeout { get; set; }

        /// <summary>Response timeout in seconds to wait for a command completion on a device. Defaults to 30 seconds.</summary>
        [Newtonsoft.Json.JsonProperty("responseTimeout", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(5, 30)]
        public int? ResponseTimeout { get; set; }

        /// <summary>The status code of the device command response.</summary>
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResponseCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceModuleCommandV1
    {
        /// <summary>The request ID of the device command execution.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>The payload for the device command.</summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Request { get; set; }

        /// <summary>The payload of the device command response.</summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Response { get; set; }

        /// <summary>Connection timeout in seconds to wait for a disconnected device to come online. Defaults to 0 seconds.</summary>
        [Newtonsoft.Json.JsonProperty("connectionTimeout", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 30)]
        public int? ConnectionTimeout { get; set; }

        /// <summary>Response timeout in seconds to wait for a command completion on a device. Defaults to 30 seconds.</summary>
        [Newtonsoft.Json.JsonProperty("responseTimeout", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(5, 30)]
        public int? ResponseTimeout { get; set; }

        /// <summary>The status code of the device command response.</summary>
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResponseCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceModuleComponentCommandV1
    {
        /// <summary>The request ID of the device command execution.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>The payload for the device command.</summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Request { get; set; }

        /// <summary>The payload of the device command response.</summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Response { get; set; }

        /// <summary>Connection timeout in seconds to wait for a disconnected device to come online. Defaults to 0 seconds.</summary>
        [Newtonsoft.Json.JsonProperty("connectionTimeout", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 30)]
        public int? ConnectionTimeout { get; set; }

        /// <summary>Response timeout in seconds to wait for a command completion on a device. Defaults to 30 seconds.</summary>
        [Newtonsoft.Json.JsonProperty("responseTimeout", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(5, 30)]
        public int? ResponseTimeout { get; set; }

        /// <summary>The status code of the device command response.</summary>
        [Newtonsoft.Json.JsonProperty("responseCode", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResponseCode { get; set; }


    }
    
    /*
    /// <summary>Property values associated with the device.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceProperties
    {
    }
    */

    /// <summary>Property values associated with the device.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DevicePropertiesV1
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>Property values associated with the module.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ModulePropertiesV1
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceTelemetry
    {
        /// <summary>The last known value of this device telemetry.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        /// <summary>String-formatted date representing the time when the telemetry value was sent.</summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Timestamp { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceTelemetryV1
    {
        /// <summary>The last known value of this device telemetry.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        /// <summary>String-formatted date representing the time when the telemetry value was sent.</summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Timestamp { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceComponentTelemetryV1
    {
        /// <summary>The last known value of this device telemetry.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        /// <summary>String-formatted date representing the time when the telemetry value was sent.</summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Timestamp { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceModuleTelemetryV1
    {
        /// <summary>The last known value of this device telemetry.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        /// <summary>String-formatted date representing the time when the telemetry value was sent.</summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Timestamp { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceModuleComponentTelemetryV1
    {
        /// <summary>The last known value of this device telemetry.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        /// <summary>String-formatted date representing the time when the telemetry value was sent.</summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Timestamp { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceTemplate
    {
        /// <summary>Unique ID of the device template.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>ETag used to prevent conflict in device template updates.</summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>The types of device to which this template applies.</summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Types { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        /// <summary>Display name of the device template.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>Detailed description of the device template.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceTemplateV1
    {
        /// <summary>Unique ID of the device template.</summary>
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>ETag used to prevent conflict in device template updates.</summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>The JSON-LD types of this device template.</summary>
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [JsonConverter(typeof(SingleOrArrayConverter<string>))]
        public System.Collections.Generic.ICollection<string> Type { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        /// <summary>Display name of the device template.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>Detailed description of the device template.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The capability model utilized by this device template.</summary>
        [Newtonsoft.Json.JsonProperty("capabilityModel", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CapabilityModel { get; set; }

        // The schema has changed so that Commands and Properties have @id as a string instead of 
        // array of strings. Therefore, we cannot deserialize them into CapabilityModel object.
        // public CapabilityModel CapabilityModel { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceTemplateCollection
    {
        /// <summary>The collection of device templates.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DeviceTemplate> Value { get; set; } =
            new System.Collections.ObjectModel.Collection<DeviceTemplate>();

        /// <summary>URL to get the next page of device templates.</summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceTemplateCollectionV1
    {
        /// <summary>The collection of device templates.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DeviceTemplateV1> Value { get; set; } =
            new System.Collections.ObjectModel.Collection<DeviceTemplateV1>();

        /// <summary>URL to get the next page of device templates.</summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleV1
    {
        /// <summary>Unique ID of the role.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Display name of the role.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleCollectionV1
    {
        /// <summary>The collection of roles.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RoleV1> Value { get; set; } =
            new System.Collections.ObjectModel.Collection<RoleV1>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Rule
    {
        /// <summary>Unique ID of the rule.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Display name of the rule.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RuleCollection
    {
        /// <summary>The collection of rules.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Rule> Value { get; set; } =
            new System.Collections.ObjectModel.Collection<Rule>();

        /// <summary>URL to get the next page of rules.</summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserV1
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserPatchV1
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserStaticV1
    {
        /// <summary>Unique ID of the user.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Type of the user.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>List of role assignments that specify the permissions to access the application.</summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<RoleAssignmentV1> Roles { get; set; } =
            new System.Collections.ObjectModel.Collection<RoleAssignmentV1>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EmailUserV1
    {
        /// <summary>Unique ID of the user.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Type of the user.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailUserV1Type Type { get; set; } = ThinkIQ.Azure.IoT.Central.Client.EmailUserV1Type.Email;

        /// <summary>List of role assignments that specify the permissions to access the application.</summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<RoleAssignmentV1> Roles { get; set; } =
            new System.Collections.ObjectModel.Collection<RoleAssignmentV1>();

        /// <summary>Email address of the user.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServicePrincipalUserV1
    {
        /// <summary>Unique ID of the user.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Type of the user.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServicePrincipalUserV1Type Type { get; set; } =
            ThinkIQ.Azure.IoT.Central.Client.ServicePrincipalUserV1Type.ServicePrincipal;

        /// <summary>List of role assignments that specify the permissions to access the application.</summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<RoleAssignmentV1> Roles { get; set; } =
            new System.Collections.ObjectModel.Collection<RoleAssignmentV1>();

        /// <summary>The AAD tenant ID of the service principal.</summary>
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TenantId { get; set; }

        /// <summary>The AAD object ID of the service principal.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ObjectId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserCollectionV1
    {
        /// <summary>The collection of users.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserStaticV1> Value { get; set; } =
            new System.Collections.ObjectModel.Collection<UserStaticV1>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleAssignmentV1
    {
        /// <summary>ID of the role for this role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Role { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WebhookActionDevice
    {
        /// <summary>Unique ID of the device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>ETag used to prevent conflict in device updates.</summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>Display name of the device.</summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>The device template definition for the device.</summary>
        [Newtonsoft.Json.JsonProperty("instanceOf", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceOf { get; set; }

        /// <summary>Whether the device is simulated.</summary>
        [Newtonsoft.Json.JsonProperty("simulated", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Simulated { get; set; }

        /// <summary>Whether the device has been approved to connect to IoT Central.</summary>
        [Newtonsoft.Json.JsonProperty("approved", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Approved { get; set; }

        /// <summary>Whether resources have been allocated for the device.</summary>
        [Newtonsoft.Json.JsonProperty("provisioned", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Provisioned { get; set; }

        /// <summary>Cloud properties that triggered the webhook.</summary>
        [Newtonsoft.Json.JsonProperty("cloudProperties", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CloudProperties { get; set; }

        /// <summary>Device properties that triggered the webhook.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Properties { get; set; }

        /// <summary>Device telemetry that triggered the webhook.</summary>
        [Newtonsoft.Json.JsonProperty("telemetry", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Telemetry { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WebhookActionBody
    {
        /// <summary>Action that triggered the webhook.</summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Action Action { get; set; } = new Action();

        /// <summary>Application that triggered the webhook.</summary>
        [Newtonsoft.Json.JsonProperty("application", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Application Application { get; set; } = new Application();

        /// <summary>Device that triggered the webhook.</summary>
        [Newtonsoft.Json.JsonProperty("device", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public WebhookActionDevice Device { get; set; } = new WebhookActionDevice();

        /// <summary>Rule that triggered the webhook.</summary>
        [Newtonsoft.Json.JsonProperty("rule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Rule Rule { get; set; } = new Rule();

        /// <summary>Timestamp at which the webhook was triggered.</summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkflowTrigger
    {
        /// <summary>Unique ID of the workflow trigger.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Unique ID of the rule that is tied to the workflow trigger.</summary>
        [Newtonsoft.Json.JsonProperty("rule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Rule { get; set; }

        /// <summary>Callback URL of the workflow Trigger.</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Url { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DynamicValues : System.Collections.ObjectModel.Collection<Anonymous>
    {

    }

    /// <summary>Type of the user.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum User_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"servicePrincipal")]
        ServicePrincipal = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EmailUserV1Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ServicePrincipalUserV1Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"servicePrincipal")]
        ServicePrincipal = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; }

        public System.Type Type { get; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminator;

        [System.ThreadStatic] private static bool _isReading;

        [System.ThreadStatic] private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminator = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminator)
        {
            _discriminator = discriminator;
        }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value,
            Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminator,
                    GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }

                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }

                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue,
            Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminator);
            var discriminator = discriminatorValue != null
                ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue)
                : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract =
                serializer.ContractResolver.ResolveContract(subtype) as
                    Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null ||
                System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminator))
            {
                jObject.Remove(_discriminator);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions
                .GetCustomAttributes<JsonInheritanceAttribute>(
                    System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions
                .GetCustomAttributes<JsonInheritanceAttribute>(
                    System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>>
            Headers { get; private set; }

        public ApiException(string message, int statusCode, string response,
            System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>>
                headers, System.Exception innerException)
            : base(
                message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null)
                    ? "(null)"
                    : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response,
            System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>>
                headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }
}
